parameters:
  BuildConfiguration: 'Release'
  BuildPlatform: 'x64'

jobs:
- job: ${{ parameters.BuildConfiguration }}_${{ parameters.BuildPlatform }}

  pool: Package ES CodeHub Lab E

  steps:
    
  - task: PowerShell@2
    
    displayName: 'Check SDK Version 17763 is present'

    inputs:
      targetType: inline
      script: dir "${ENV:programfiles(x86)}\windows Kits\10\include\10.0.17763.0\"
    

  - task: DotNetCoreInstaller@0

    displayName: 'Use .NET Core sdk 2.1.300'

    inputs:

      version: 2.1.300


  - task: NuGetToolInstaller@0

    displayName: 'Use NuGet 4.9.2'

    inputs:

      versionSpec: 4.9.2


  - task: NuGetCommand@2

    displayName: 'NuGet restore'


  - task: VSBuild@1

    displayName: 'Build AdapterSelection Sample '

    inputs:

      solution: Samples/AdapterSelection/AdapterSelection.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()

  - task: VSBuild@1

    displayName: 'Build CustomOperatorCPU Sample '

    inputs:

      solution: Samples/CustomOperatorCPU/desktop/cpp/custom-operator-cpu-sample.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build MNIST-Tutorial-cs'

    inputs:

      solution: 'Samples/MNIST/Tutorial/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build MNIST-UWP-cs'

    inputs:

      solution: 'Samples/MNIST/UWP/cs/mnist_demo.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build SqueezenetObjectDetection'

    inputs:

      solution: Samples/SqueezeNetObjectDetection/squeezenetobjectdetection.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build FNSCandyStyleTransfer-UWP-CS'

    inputs:

      solution: Samples/FNSCandyStyleTransfer/UWP/CS/snapcandy.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag  /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build MNIST-UWP-cppcx '

    inputs:

      solution: 'Samples/MNIST/UWP/cppcx/mnist_cppcx.sln'
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()


  - task: VSBuild@1

    displayName: 'Build CustomTensorization Sample'

    inputs:

      solution: Samples/CustomTensorization/CustomTensorization.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()

  - task: CopyFiles@2
    inputs:
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      sourceFolder: '$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'

 # publish build artifacts is failing for various platform/configurations non-deterministically. commenting out of master for now
  - task: PublishBuildArtifacts@1

    displayName: 'Publish Artifact: Samples'

    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: WinMLPublicSamples

    condition: succeededOrFailed()

  - task: VSBuild@1

    displayName: 'Build Emoji Sample'

    inputs:

      solution: Samples/Emoji8/UWP/cs/Emoji8.sln
      vsVersion: 15.0
      msbuildArgs: '/p:AppxPackageSigningEnabled=false -v:diag /p:OutDir=$(System.DefaultWorkingDirectory)\bin\${{ parameters.BuildPlatform }}\${{ parameters.BuildConfiguration }}\'
      platform: '${{ parameters.BuildPlatform }}'
      configuration: '${{ parameters.BuildConfiguration }}'
      clean: true
      msbuildArchitecture: x64
      createLogFile: true

    condition: succeededOrFailed()

